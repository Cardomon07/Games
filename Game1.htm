<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe with Advanced AI | Cardomon07Games</title>
    <style>
        body {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background: linear-gradient(135deg, #9b59b6, #8e44ad);
            font-family: 'Arial', sans-serif;
            color: #ecf0f1;
        }
        #companyName {
            font-size: 2em;
            font-weight: bold; /* Make company name bold */
            margin-bottom: 20px;
            color: #f39c12;
            font-family: 'Comic Sans MS', cursive; /* Change font to Comic Sans */
        }
        #exitButton {
            position: absolute;
            top: 10px;
            left: 10px;
            padding: 8px 15px;
            font-size: 1em;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            color: #ecf0f1;
            background-color: #e74c3c;
            transition: background-color 0.3s;
            box-shadow: 0 0 5px rgba(0,0,0,0.3);
        }
        #exitButton:hover {
            background-color: #c0392b;
        }
        #message {
            font-size: 1.2em;
            margin-bottom: 20px;
        }
        #game {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
            border: 3px solid #f39c12;
            background-color: #2c3e50;
            margin-bottom: 20px;
        }
        .cell {
            width: 100px;
            height: 100px;
            background-color: #34495e;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            cursor: pointer;
            border: 1px solid #f39c12;
            transition: background-color 0.3s;
        }
        .cell:hover {
            background-color: #2c3e50;
        }
        #startButton, #restartButton {
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            border: none;
            border-radius: 5px;
            color: #ecf0f1;
            background-color: #3498db;
            transition: background-color 0.3s;
            box-shadow: 0 0 5px rgba(0,0,0,0.3);
        }
        #startButton:hover, #restartButton:hover {
            background-color: #2980b9;
        }
    </style>
</head>
<body>
    <button id="exitButton">Exit</button>
    <div id="companyName">Cardomon07Games</div>
    <div id="message">Press "Start Game" to begin</div>
    <button id="startButton">Start Game</button>
    <div id="game"></div>
    <button id="restartButton" style="display: none;">Restart Game</button>
    <script>
        const game = document.getElementById('game');
        const message = document.getElementById('message');
        const startButton = document.getElementById('startButton');
        const restartButton = document.getElementById('restartButton');
        const exitButton = document.getElementById('exitButton');
        let board = ['', '', '', '', '', '', '', '', ''];
        let currentPlayer = 'X';

        startButton.addEventListener('click', () => {
            startGame();
            startButton.style.display = 'none';
            game.style.display = 'grid';
            restartButton.style.display = 'none';
        });

        exitButton.addEventListener('click', () => {
            window.location.href = "https://cardomon07.github.io/Games/lol.htm"; // Redirect to home page
        });

        restartButton.addEventListener('click', () => {
            startGame();
            restartButton.style.display = 'none';
        });

        function startGame() {
            board = ['', '', '', '', '', '', '', '', ''];
            currentPlayer = 'X';
            createBoard();
            message.innerText = `${currentPlayer}'s turn`;
        }

        function createBoard() {
            game.innerHTML = '';
            board.forEach((cell, index) => {
                const cellElement = document.createElement('div');
                cellElement.classList.add('cell');
                cellElement.setAttribute('data-index', index);
                cellElement.innerText = cell;
                cellElement.addEventListener('click', handleCellClick);
                game.appendChild(cellElement);
            });
        }

        function handleCellClick(event) {
            const index = event.target.getAttribute('data-index');
            if (board[index] === '' && currentPlayer === 'X') {
                makeMove(index, 'X');
                if (!checkWinner() && !isBoardFull()) {
                    currentPlayer = 'O'; // Switch turn to computer
                    message.innerText = `${currentPlayer}'s turn`;
                    setTimeout(computerMove, 500);
                } else {
                    endGame();
                }
            }
        }

        function computerMove() {
            let move = getBestMove();
            makeMove(move, 'O');
            if (!checkWinner() && !isBoardFull()) {
                currentPlayer = 'X'; // Switch turn back to player
                message.innerText = `${currentPlayer}'s turn`;
            } else {
                endGame();
            }
        }

        function getBestMove() {
            let bestMove = -1;
            let bestScore = -Infinity;

            for (let i = 0; i < board.length; i++) {
                if (board[i] === '') {
                    board[i] = 'O';
                    let score = minimax(board, 0, false, -Infinity, Infinity);
                    board[i] = '';
                    if (score > bestScore) {
                        bestScore = score;
                        bestMove = i;
                    }
                }
            }

            return bestMove;
        }

        function minimax(board, depth, isMaximizing, alpha, beta) {
            const winner = checkWinner();
            if (winner !== null) {
                if (winner === 'X') return -1;
                else if (winner === 'O') return 1;
                return 0;
            }

            if (isMaximizing) {
                let bestScore = -Infinity;
                for (let i = 0; i < board.length; i++) {
                    if (board[i] === '') {
                        board[i] = 'O';
                        let score = minimax(board, depth + 1, false, alpha, beta);
                        board[i] = '';
                        bestScore = Math.max(score, bestScore);
                        alpha = Math.max(alpha, bestScore);
                        if (beta <= alpha) break;
                    }
                }
                return bestScore;
            } else {
                let bestScore = Infinity;
                for (let i = 0; i < board.length; i++) {
                    if (board[i] === '') {
                        board[i] = 'X';
                        let score = minimax(board, depth + 1, true, alpha, beta);
                        board[i] = '';
                        bestScore = Math.min(score, bestScore);
                        beta = Math.min(beta, bestScore);
                        if (beta <= alpha) break;
                    }
                }
                return bestScore;
            }
        }

        function makeMove(index, player) {
            board[index] = player;
            document.querySelector(`[data-index='${index}']`).innerText = player;
        }

        function checkWinner() {
            const winPatterns = [
                [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows
                [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns
                [0, 4, 8], [2, 4, 6]             // diagonals
            ];
            for (let pattern of winPatterns) {
                const [a, b, c] = pattern;
                if (board[a] && board[a] === board[b] && board[a] === board[c]) {
                    return board[a];
                }
            }
            return board.every(cell => cell !== '') ? 'draw' : null;
        }

        function isBoardFull() {
            return board.every(cell => cell !== '');
        }

        function endGame() {
            const winner = checkWinner();
            if (winner === 'X') {
                message.innerText = "You win!";
            } else if (winner === 'O') {
                message.innerText = "AI wins!";
            } else {
                message.innerText = "It's a draw!";
            }
            restartButton.style.display = 'block';
        }
    </script>
</body>
  </html>
